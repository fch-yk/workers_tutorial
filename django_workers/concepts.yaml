Воркер: !concept
  определение: |
    Воркер -- это отдельная программа, отвечающая за выполнение задач в фоне.
    Англ.: Worker.
  Один воркер для нескольких очередей задач: !extension |
    Может вестись две параллельные рассылки по разным аудиториям: одна триггерная и две обычные разовые. В такой ситуации
    пользователь ожидает, что усилия рассыльщика будут равномерно распределены по всем активным рассылкам.
  Универсальный воркер для разных очередей: !example |
    Универсальный воркер умеет работать с разными очередями задач. Достаточно указать ему на очередь задач.
  Синхронный воркер: !example |
    Синхронный воркер умеет запускать только синхронный код.
  Асинхронный воркер: !extension
  Универсальный синхронно-асинхронный воркер: !extension |
    Воркер поддерживает как синхронные, так и асинхронные очереди задач.
  С автоматическим перезапуском по изменению кода: !example |
    Воркер замечает изменение кода в файлах и сам автоматически перезапускается. Такой режим удобен в разработке.
  С параллелельной обработкой в асинхронных функциях: !extension
  С уведомлениями в канале PostgreSQL: !extension |
    О новых задачах воркер узнаёт не только через периодический опрос базы данных, но также через push уведомления от
    PostgreSQL.


Очередь задач: !concept
  определение: |
    Очередь задач предоставляет описание и методы работы с задачами: найти следующую задачу, присвоить ей id,
    обработать, записать отчёт о возникшей проблемы.
    Очередь задач виртуальна в том смысле, что в БД нет отдельной таблицы со списком задач. Задачи генерируются на лету
    SQL-запросом к БД. Виртуальность списка задач упрощает поддержку его в актуальном состоянии.
    Англ.: Task Queue.
  Реиспользуемая очередь задач: !example |
    В приложении используется сразу несколько похожих очередей задач. Код у них общий, а отличаются они только
    настройками.
  Универсальная очередь задач с памятью через ForeignKey: !extension |
    Очередь задач имеет в базе данных отдельную таблицу для отчётов о выполнении задач.
    Такую очередь можно быстро подключить к таблице с исходными данными об актуальных задачах, но ценой этого будут
    тяжёлые запросы к БД, требующие JOIN двух больших таблиц: источник задач и отчёты о выполнении задач.
  Очередь задач с шардингом: !extension |
    Если воркеров работает много, то распределить между ними задачи можно через механизм шардинга -- вместо одной
    очереди задач создаётся сразу несколько похожих очередей с разными сечениями. Например, в первую очередь
    попадают только задачи с чётными id, а во вторую -- только с нечётными.
  Очередь задач с фоновыми процессами: !extension |
    Очередь задач в процессе своей работы создаёт так много записей, что это база данных начинает заметно тормозить.
    Кто-то должен регулярно чистить базу данных. В такой ситуации создаём отдельную management-команду.
  Синхронная очередь задач: !example |
    Методы синхронной очереди задач содержат синхронный методы ORM и обработки задачи.
  Асинхронный очередь задач: !extension |
    Методы асинхронной очереди задач содержат асинхронные методы ORM и обработки задачи.
  Универсальная синхронно-асинхронная очередь задач: !exclusion |
    Не смешиваем сихронный и асинхронный код в одной очереди задач.
  Очередь с переносами задач: !extension |
    Запуск задачи приводит не к завершению задачи, а к её переносу на другую дату-время в будущем.
  Абстрактная очередь задач: !example |
    Все очереди задач имеют общий интефрейс -- такой же, как у абстрактного события воронки. Общий интерфейс позволяет
    воркеру работать с любой из указанных очередей.
  Очередь со сложным проверками актуальности задач: !example |
    Очередь рассылки чат-бота отправляет пользователям запланированные сообщения только после того, как те бездействуют
    хотя бы пять минут. С такой проверкой рассылка не будет мешать пользователю работать с чат-ботом.
  Перегруженная очередь задача: !example |
    Воркеры не успевают разгребать задачи -- необработанных становится всё больше.
  Очередь задач без воркера: !example |
    Из-за ошибки конфигурации воркер на сервере так и не заработал. Задачи в очереди некому обрабатывать.
  Очередь задач с несколькими конкурирующими воркерами: !example
  Очередь задач с запретом на конкуренцию воркеров: !example |
    Код очереди задач так написан, что не поддерживает параллельную обработку несколькими конкурирующими воркерами.
  Зациклившаяся очередь задач: !example |
    Из-за ошибки в коде выполенные задачи остаются в очереди, что приводит к многократной повторной обработке одних и
    тех же задач.
    Похожая ситуация возможна из-за неправильной записи в БД ошибок при обработке задач. Тогда может случиться
    зацикливание на одной поломанной задаче.
  Очередь задач с выборкой дополнительных данных: !example |
    Для выполнения задачи из БД нужно вытащить дополнительные данные. Чтобы не делать лишний SQL-запрос очередь задач
    сразу запрашивает недостающие данные с помощью `select_related`, `prefetch_related` и `annotate` в тот момент, когда
    выбирает за какую задачу взяться.


Задача: !concept
  Прерванная из-за программной ошибки задача: !example |
    Рассылка так и не разлетелась по пользователям -- упала из-за программной ошибки.
  Задача завершилась с ошибкой: !example
  Повторный запус задачи: !example |
    Маркетолог изменил текстовки старой рассылки с промо акцией, и теперь хочет провести её заново.
  Запланированная задача: !extension |
    Для старта рассылки назначен день и время.
  Отложенная задача: !extension |
    Пользователь активно работает с ботом как раз через час после первого запуска, и через час по плану ему должно
    прилететь триггерное сообщение по рассылке. Чтобы не мешать пользователю триггерное сообщение ждёт когда освободится
    пользователь.
  Просроченная задача: !example |
    Из-за сбоя на сервере или в ПО триггерные рассылки не улетали в течение пары дней. По окончанию ремонта монут
    накопиться куча разных рассылок, не отправленных в срок.
  Отложенная задача: !extension |
    Пользователь активно работает с чат-ботом как раз спустя час после первого запуска, а через час по плану ему должно
    прилететь триггерное сообщение по рассылке. Чтобы не мешать пользователю триггерное сообщение ждёт когда
    освободится пользователь.
  Задача с параметрами: !example |
    В рассылку можно вставлять переменные с персональной информацией, например имя пользователя или его API ключ. Набор доступных
    для подстановки значений определяют программисты.
  Задача без ID: !exclusion |
    У задачи обязан быть уникальный ID в рамках очереди задач.


# TODO Добавить сущность Статистика использования очереди задач
# Используется для проверок здоровья (headlthcheck) и принятия решения об автоматическом масштабировании по количеству
# воркеров.
